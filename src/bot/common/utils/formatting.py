"""–£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, —á–∏—Å–µ–ª, –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏."""
from datetime import datetime, time


def parse_dt_raw(value: str | bytes | None) -> datetime | None:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ datetime –∏–∑ —Å—ã—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ bytes

    :param value: —Å—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ datetime (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ bytes –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ)
    :return: —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π datetime –±–µ–∑ timezone, –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if not value:
        return None
    if isinstance(value, (bytes, bytearray)):
        value = value.decode()
    try:
        return datetime.fromisoformat(value.replace("Z", "+00:00")).replace(tzinfo=None)
    except Exception:
        return None


def fmt_secs(v: float | int | str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    :param v: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ (float, int –∏–ª–∏ string)
    :return: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "5 —Å" –∏–ª–∏ "3.2 —Å"
    """
    try:
        num = float(v)
        if abs(num - int(num)) < 1e-9:
            return f"{int(num)} —Å"
        return f"{num:.1f} —Å"
    except Exception:
        return str(v)


def fmt_int(n: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç—ã—Å—è—á

    :param n: —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    :return: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "1 234 567"
    """
    try:
        return f"{int(n):,}".replace(",", " ")
    except Exception:
        return str(n)


def human_ago(dt: datetime | None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ datetime –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è

    :param dt: datetime –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    :return: —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "5 –º–∏–Ω –Ω–∞–∑–∞–¥", "2 —á –Ω–∞–∑–∞–¥", "3 –¥–Ω –Ω–∞–∑–∞–¥"
    """
    if not dt:
        return "‚Äî"
    now = datetime.now()
    delta = now - dt
    secs = int(delta.total_seconds())
    if secs < 60:
        return f"{secs} —Å–µ–∫ –Ω–∞–∑–∞–¥"
    mins = secs // 60
    if mins < 60:
        return f"{mins} –º–∏–Ω –Ω–∞–∑–∞–¥"
    hours = mins // 60
    if hours < 24:
        return f"{hours} —á –Ω–∞–∑–∞–¥"
    days = hours // 24
    return f"{days} –¥–Ω –Ω–∞–∑–∞–¥"


def fmt_time(t: time | None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ time –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ HH:MM

    :param t: –æ–±—ä–µ–∫—Ç time –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    :return: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "14:30" –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ None
    """
    return t.strftime("%H:%M") if t else ""


def time_to_str(t: time) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ time –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ HH:MM

    :param t: –æ–±—ä–µ–∫—Ç time
    :return: —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∞ "14:30"
    """
    return t.strftime("%H:%M")


def str_to_time(s: str | None, default: time) -> time:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ HH:MM

    :param s: —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ñ–æ—Ä–º–∞—Ç: "HH:MM")
    :param default: –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    :return: —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç time –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    if not s:
        return default
    try:
        hh, mm = s.split(":")
        return time(int(hh), int(mm))
    except Exception:
        return default


def format_notification_message(task) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram

    :param task: –æ–±—ä–µ–∫—Ç NotificationTask —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞
    :return: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è HTML-—Å—Ç—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    from bot.domain.entities.mappings import SUBJECTS

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞
    subject_display = SUBJECTS.get(task.subject_code, task.subject_code) if task.subject_code else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –î–∞—Ç–∞/–≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è
    lesson_date_str = ""
    if task.lesson_date:
        lesson_date_str = task.lesson_date.strftime('%d.%m %H:%M')

    # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    teacher = task.teacher or ""

    # –•—ç—à—Ç–µ–≥–∏
    def sanitize_tag(value: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö—ç—à—Ç–µ–≥–∞."""
        import re
        tag = re.sub(r"[\s.]+", "_", value.strip())
        tag = re.sub(r"[^0-9A-Za-z–ê-–Ø–∞-—è–Å—ë_]+", "", tag)
        tag = re.sub(r"_+", "_", tag).strip("_")
        return tag

    hashtags: list[str] = []
    # –¢–µ–º–∞ (–ª–µ–∫—Ü–∏—è/—Å–µ–º–∏–Ω–∞—Ä)
    if getattr(task, "topic", None):
        hashtags.append(f"#{sanitize_tag(task.topic.lower())}")
    # –ì—Ä—É–ø–ø–∞
    if getattr(task, "study_group", None):
        hashtags.append(f"#{sanitize_tag(str(task.study_group))}")
    # –ü—Ä–µ–¥–º–µ—Ç (–∫–æ–¥)
    if getattr(task, "subject_code", None):
        hashtags.append(f"#{sanitize_tag(task.subject_code)}")
    # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å (–∫–∞–∫ –¥–æ–ø. —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞)
    if teacher:
        hashtags.append(f"#{sanitize_tag(teacher)}")

    # –í—ã–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É: download_url –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ, –∏–Ω–∞—á–µ public_url
    public_link = task.public_url or ""
    download_link = task.download_url or ""

    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    lines: list[str] = [f"üìö <b>{subject_display or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</b>"]
    if lesson_date_str:
        lines.append(f"üìÖ {lesson_date_str}")
    if teacher:
        lines.append(f"üë®‚Äçüè´ {teacher}")
    if hashtags:
        for h in hashtags:
            # –†–∞–∑–Ω–æ—Å–∏–º —Ç–µ–≥–∞–º–∏ –ø–æ —Å–º—ã—Å–ª—É
            if h.startswith('#–ª–µ–∫—Ü–∏—è') or h.startswith('#—Å–µ–º–∏–Ω–∞—Ä'):
                lines.append(f"üíº {h}")
            elif getattr(task, "study_group", None) and h.endswith(str(task.study_group)):
                lines.append(f"üë• {h}")
            elif getattr(task, "subject_code", None) and h.endswith(task.subject_code):
                lines.append(f"üìñ {h}")
            else:
                lines.append(f"üè∑Ô∏è {h}")
    if public_link:
        lines.append(f"\nüîó <a href='{public_link}'>–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</a>")
    if download_link:
        lines.append(f"üîó <a href='{download_link}'>–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ</a>")
    else:
        lines.append(f"\nüìÑ –§–∞–π–ª: {task.file_name}")

    return "\n".join(lines)
