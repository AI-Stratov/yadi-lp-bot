"""–§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""

from bot.domain.entities.statistics import StatsSnapshot
from bot.common.utils.formatting import fmt_int, human_ago


class StatisticsFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""

    @staticmethod
    def format_summary(snap: StatsSnapshot) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

        :param snap: —Å–Ω–∞–ø—à–æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        :return: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        lines: list[str] = []
        lines.append("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>")
        lines.append(f"‚Ä¢ –í—Å–µ–≥–æ: <b>{fmt_int(snap.users_total)}</b>")
        lines.append(f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: <b>{fmt_int(snap.users_enabled)}</b>")

        if snap.by_course:
            parts = ", ".join(f"{k}: {fmt_int(v)}" for k, v in sorted(snap.by_course.items()))
            lines.append(f"‚Ä¢ –ü–æ –∫—É—Ä—Å–∞–º: {parts}")
        if snap.by_group:
            parts = ", ".join(f"{k}: {fmt_int(v)}" for k, v in sorted(snap.by_group.items()))
            lines.append(f"‚Ä¢ –ü–æ –≥—Ä—É–ø–ø–∞–º: {parts}")

        lines.append("")
        lines.append("üß© <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>")
        lines.append(f"‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á: <b>{fmt_int(snap.queue_len)}</b>")
        lines.append(f"‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: <b>{fmt_int(snap.scheduled_total)}</b>")

        lines.append("")
        lines.append("üìÅ <b>–§–∞–π–ª—ã –Ω–∞ –¥–∏—Å–∫–µ</b>")
        if getattr(snap, "disk_computed_at", None) is None:
            lines.append("‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è‚Ä¶ (–ø–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ 5 –º–∏–Ω—É—Ç)")
        else:
            if getattr(snap, "disk_groups", None):
                parts = ", ".join(f"{k}: {fmt_int(v)}" for k, v in sorted(snap.disk_groups.items()))
                lines.append(f"‚Ä¢ –ü–æ –≥—Ä—É–ø–ø–∞–º: {parts}")
            lines.append(f"‚Ä¢ –û–±—â–∏–µ (–±–µ–∑ –≥—Ä—É–ø–ø—ã): <b>{fmt_int(getattr(snap, 'disk_common', 0))}</b>")
            lines.append(
                f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {snap.disk_computed_at.strftime('%d.%m.%Y %H:%M:%S')} ({human_ago(snap.disk_computed_at)})"
            )

        lines.append("")
        lines.append("üö´ <b>–¢–æ–ø –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω</b>")
        if getattr(snap, "top_excluded", None):
            top_disabled = ", ".join(f"{k}√ó{v}" for k, v in snap.top_excluded.items())
        else:
            top_disabled = "‚Äî"
        lines.append(top_disabled)

        return "\n".join(lines)

