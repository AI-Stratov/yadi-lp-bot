"""–ë–∏–ª–¥–µ—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è Telegram UI."""
from aiogram import types
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.domain.entities.course import Course, get_courses
from bot.domain.entities.mappings import SUBJECTS, NotificationScheduleMode
from bot.domain.entities.user import UserEntity
from bot.common.utils.formatting import fmt_time, fmt_int


# ============================================================================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –∏ –≥—Ä—É–ø–ø—ã (/set)
# ============================================================================

def build_courses_kb() -> types.InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞

    :return: inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    """
    kb = InlineKeyboardBuilder()
    for code, course in get_courses().items():
        kb.button(text=course.title, callback_data=f"course:{code}")
    kb.adjust(2)
    return kb.as_markup()


def build_groups_kb(course: Course) -> types.InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞

    :param course: –æ–±—ä–µ–∫—Ç –∫—É—Ä—Å–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏
    :return: inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø –∫—É—Ä—Å–∞
    """
    kb = InlineKeyboardBuilder()
    for group in course.groups:
        kb.button(text=f"{group}", callback_data=f"group:{course.code}:{group}")
    kb.adjust(3)
    return kb.as_markup()


# ============================================================================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (/settings)
# ============================================================================

def build_notification_modes_kb(current: NotificationScheduleMode | None) -> types.InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    :param current: —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º (–¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≥–∞–ª–æ—á–∫–æ–π)
    :return: inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ–∂–∏–º–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    """
    kb = InlineKeyboardBuilder()

    def mark(mode: NotificationScheduleMode) -> str:
        return "‚úÖ " if current == mode else ""

    kb.row(
        InlineKeyboardButton(text=f"{mark(NotificationScheduleMode.ASAP)}‚ö° –°—Ä–∞–∑—É", callback_data="mode:ASAP"),
    )
    kb.row(
        InlineKeyboardButton(
            text=f"{mark(NotificationScheduleMode.AT_TIME)}‚è∞ –í –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è",
            callback_data="mode:AT_TIME"
        ),
    )
    kb.row(
        InlineKeyboardButton(
            text=f"{mark(NotificationScheduleMode.IN_WINDOW)}ü™ü –í –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ",
            callback_data="mode:IN_WINDOW"
        ),
    )
    kb.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"),
    )
    kb.adjust(1)
    return kb.as_markup()


def build_notification_settings_kb(user: UserEntity) -> types.InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    :param user: —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    :return: inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    def get_mode_label(u: UserEntity) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏."""
        mode = u.notification_mode
        if mode == NotificationScheduleMode.ASAP:
            return "‚ö° –†–µ–∂–∏–º: —Å—Ä–∞–∑—É"
        if mode == NotificationScheduleMode.AT_TIME:
            return "‚è∞ –†–µ–∂–∏–º: –≤—Ä–µ–º—è"
        if mode == NotificationScheduleMode.IN_WINDOW:
            return "ü™ü –†–µ–∂–∏–º: –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫"
        return "‚öôÔ∏è –†–µ–∂–∏–º: –≤—ã–±—Ä–∞—Ç—å"

    kb = InlineKeyboardBuilder()

    # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notif_mark = "üü¢ –í–∫–ª" if user.enable_notifications else "üî¥ –í—ã–∫–ª"
    kb.row(InlineKeyboardButton(text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notif_mark}", callback_data="toggle_notifications"))

    # –†–µ–∂–∏–º –¥–æ—Å—Ç–∞–≤–∫–∏
    kb.row(InlineKeyboardButton(text=get_mode_label(user), callback_data="choose_mode"))

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—É
    if user.notification_mode == NotificationScheduleMode.AT_TIME:
        t = fmt_time(user.task_send_time) or "-"
        kb.row(InlineKeyboardButton(text=f"‚è∞ –í—Ä–µ–º—è: {t}", callback_data="set_time"))
    elif user.notification_mode == NotificationScheduleMode.IN_WINDOW:
        s = fmt_time(user.delivery_window_start) or "-"
        e = fmt_time(user.delivery_window_end) or "-"
        kb.row(InlineKeyboardButton(text=f"ü™ü –û–∫–Ω–æ: {s}‚Äì{e}", callback_data="set_window"))

    # –ü—Ä–µ–¥–º–µ—Ç—ã: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–≤—Å–µ–≥–æ –ø–æ –∫—É—Ä—Å—É –º–∏–Ω—É—Å –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ)
    subjects_label = "üìö –ü—Ä–µ–¥–º–µ—Ç—ã"
    try:
        if user.user_course:
            from bot.domain.entities.mappings import iter_subjects_for_course
            total = len([key for key, _ in iter_subjects_for_course(user.user_course)])
            excluded_cnt = len(user.excluded_disciplines or set())
            active_cnt = max(total - excluded_cnt, 0)
            subjects_label = f"üìö –ü—Ä–µ–¥–º–µ—Ç—ã ({active_cnt})"
    except Exception:
        # –≤ —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ - –Ω–µ –ª–æ–º–∞–µ–º –º–µ–Ω—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –Ω–∞–¥–ø–∏—Å—å
        pass

    kb.row(InlineKeyboardButton(text=subjects_label, callback_data="subjects"))

    kb.adjust(1)
    return kb.as_markup()


def build_subjects_selection_kb(
    *,
    subject_keys: list[str],
    excluded_keys: set[str],
    page: int,
    page_size: int = 8
) -> types.InlineKeyboardMarkup:
    """
    –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤

    :param subject_keys: —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–ø–∞–ø–æ–∫ –Ω–∞ –¥–∏—Å–∫–µ)
    :param excluded_keys: –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–µ–∫—É—â–∏—Ö –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    :param page: –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
    :param page_size: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    :return: inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π

    –ó–µ–ª—ë–Ω–∞—è —Ç–æ—á–∫–∞ ‚Äî –ø—Ä–µ–¥–º–µ—Ç –≤–∫–ª—é—á—ë–Ω; –∫—Ä–∞—Å–Ω–∞—è ‚Äî –∏—Å–∫–ª—é—á—ë–Ω.
    callback_data –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω–¥–µ–∫—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤.
    """
    start_idx = page * page_size
    end_idx = start_idx + page_size
    page_keys = subject_keys[start_idx:end_idx]

    kb = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(page_keys), 2):
        row = []
        for offset, key in enumerate(page_keys[i: i + 2], start=i):
            display = SUBJECTS.get(key, key)
            is_excluded = key in excluded_keys
            mark = "üî¥" if is_excluded else "üü¢"
            global_index = start_idx + offset
            row.append(
                InlineKeyboardButton(
                    text=f"{mark} {display}",
                    callback_data=f"subj_ti:{global_index}",
                )
            )
        kb.row(*row)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    has_prev = page > 0
    has_next = end_idx < len(subject_keys)
    nav = []
    if has_prev:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"subj_page:{page - 1}"))
    if has_next:
        nav.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"subj_page:{page + 1}"))
    if nav:
        kb.row(*nav)

    # –î–µ–π—Å—Ç–≤–∏—è
    kb.row(
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="subj_done"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="subj_cancel"),
    )

    return kb.as_markup()


# ============================================================================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (/stats)
# ============================================================================

def build_stats_menu_kb() -> types.InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    :return: inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="üìö –ü–æ –∫—É—Ä—Å–∞–º", callback_data="stats:courses:page:0"),
        InlineKeyboardButton(text="üë• –ü–æ –≥—Ä—É–ø–ø–∞–º", callback_data="stats:groups:page:0"),
    )
    kb.row(InlineKeyboardButton(text="üö´ –û—Ç–∫–ª—é—á—ë–Ω–Ω—ã–µ", callback_data="stats:disabled"))
    kb.row(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats:refresh"))
    kb.adjust(2)
    return kb.as_markup()


def build_kv_list_kb(
    *,
    items: list[tuple[str, int]],
    page: int,
    back_cb: str,
    page_cb_prefix: str,
    page_size: int = 10
) -> types.InlineKeyboardMarkup:
    """
    –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ

    :param items: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∫–ª—é—á, –∑–Ω–∞—á–µ–Ω–∏–µ) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    :param page: –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
    :param back_cb: callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    :param page_cb_prefix: –ø—Ä–µ—Ñ–∏–∫—Å callback_data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    :param page_size: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    :return: inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    """
    start = page * page_size
    end = start + page_size
    page_items = items[start:end]

    kb = InlineKeyboardBuilder()

    # –ü–æ 2 –≤ —Ä—è–¥ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    row: list[InlineKeyboardButton] = []
    for key, val in page_items:
        text = f"{key}: {fmt_int(val)}"
        row.append(InlineKeyboardButton(text=text, callback_data="stats:nop"))
        if len(row) == 2:
            kb.row(*row)
            row = []
    if row:
        kb.row(*row)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    has_prev = page > 0
    has_next = end < len(items)
    nav: list[InlineKeyboardButton] = []
    if has_prev:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"{page_cb_prefix}:{page - 1}"))
    if has_next:
        nav.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"{page_cb_prefix}:{page + 1}"))
    if nav:
        kb.row(*nav)

    kb.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_cb))
    return kb.as_markup()


# ============================================================================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ (/roles)
# ============================================================================

def build_roles_menu_kb() -> types.InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    :return: inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="roles:view:users:page:0"),
        InlineKeyboardButton(text="üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="roles:view:admins:page:0"),
    )
    kb.row(InlineKeyboardButton(text="üìã –í—Å–µ", callback_data="roles:view:all:page:0"))
    return kb.as_markup()
