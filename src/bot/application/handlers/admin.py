from aiogram import Router, types, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dishka import FromDishka
from dishka.integrations.aiogram import inject

from bot.application.widgets.keyboards import build_roles_menu_kb
from bot.common.utils.pagination import paginate
from bot.common.utils.permissions import is_superuser
from bot.common.utils.sorting import sort_users
from bot.domain.entities import constants as app_consts
from bot.domain.entities.mappings import UserType
from bot.domain.entities.user import CreateUserEntity
from bot.domain.services.user import UserServiceInterface

router = Router(name="roles")


async def _build_role_list_page(user_service: UserServiceInterface, role_choice: str, page: int) -> tuple[str, InlineKeyboardMarkup]:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏.

    Args:
        user_service: –°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        role_choice: –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–æ–ª—å (users/admins)
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    Returns:
        tuple[str, InlineKeyboardMarkup]: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    if role_choice == "users":
        role_type = UserType.USER
        header = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        action_label = "–°–¥–µ–ª–∞—Ç—å ADMIN"
        new_role = UserType.ADMIN
    elif role_choice == "admins":
        role_type = UserType.ADMIN
        header = "üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"
        action_label = "–°–¥–µ–ª–∞—Ç—å USER"
        new_role = UserType.USER
    else:
        role_type = UserType.USER
        header = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        action_label = "–°–¥–µ–ª–∞—Ç—å ADMIN"
        new_role = UserType.ADMIN

    users = await user_service.get_users_by_type(role_type)
    users = sort_users(users)

    pg = paginate(users, page, app_consts.PAGE_SIZE)

    lines: list[str] = [f"{header} ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {pg.page + 1}/{pg.total_pages}", f"–í—Å–µ–≥–æ: {pg.total_items}", ""]

    kb = InlineKeyboardBuilder()

    if pg.total_items == 0:
        lines.append("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–í—Å–µ', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        for u in pg.items:
            name = u.display_name
            lines.append(f"‚Ä¢ {name} (ID: {u.tg_id})")
            # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ä–æ–ª–∏
            kb.row(
                InlineKeyboardButton(
                    text=f"{action_label} ‚Äî {name}",
                    callback_data=f"roles:set:{u.tg_id}:{new_role}:{role_choice}:{pg.page}",
                )
            )

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = []
    if pg.has_prev:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"roles:view:{role_choice}:page:{pg.page - 1}"))
    if pg.has_next:
        nav_row.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"roles:view:{role_choice}:page:{pg.page + 1}"))
    if nav_row:
        kb.row(*nav_row)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    kb.row(InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="roles:menu"))

    return "\n".join(lines), kb.as_markup()


async def _build_all_list_page(user_service: UserServiceInterface, page: int) -> tuple[str, InlineKeyboardMarkup]:
    """
    –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    Args:
        user_service: –°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    Returns:
        tuple[str, InlineKeyboardMarkup]: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    users = await user_service.list_all_users()
    users = sort_users(users)

    pg = paginate(users, page, app_consts.PAGE_SIZE)

    lines: list[str] = [f"üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {pg.page + 1}/{pg.total_pages}", f"–í—Å–µ–≥–æ: {pg.total_items}", ""]

    kb = InlineKeyboardBuilder()

    if pg.total_items == 0:
        lines.append("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        for u in pg.items:
            role = getattr(u, "user_type", UserType.USER)
            name = u.display_name
            role_label = "SUPERUSER" if role == UserType.SUPERUSER else ("ADMIN" if role == UserType.ADMIN else "USER")
            lines.append(f"‚Ä¢ {name} (ID: {u.tg_id}) ‚Äî {role_label}")
            # –ö–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ä–æ–ª–µ–π —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É USER/ADMIN
            if role != UserType.SUPERUSER:
                if role == UserType.ADMIN:
                    kb.row(
                        InlineKeyboardButton(
                            text=f"–°–¥–µ–ª–∞—Ç—å USER ‚Äî {name}",
                            callback_data=f"roles:set:{u.tg_id}:{UserType.USER}:all:{pg.page}",
                        )
                    )
                elif role == UserType.USER:
                    kb.row(
                        InlineKeyboardButton(
                            text=f"–°–¥–µ–ª–∞—Ç—å ADMIN ‚Äî {name}",
                            callback_data=f"roles:set:{u.tg_id}:{UserType.ADMIN}:all:{pg.page}",
                        )
                    )

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = []
    if pg.has_prev:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"roles:view:all:page:{pg.page - 1}"))
    if pg.has_next:
        nav_row.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"roles:view:all:page:{pg.page + 1}"))
    if nav_row:
        kb.row(*nav_row)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    kb.row(InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="roles:menu"))

    return "\n".join(lines), kb.as_markup()


@router.message(Command("roles"))
@inject
async def cmd_roles(
    message: types.Message,
    user_service: FromDishka[UserServiceInterface],
):
    """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)."""
    caller = await user_service.get_or_create(CreateUserEntity.from_aiogram(message.from_user))
    if not is_superuser(caller):
        await message.reply("üö´ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        return

    await message.answer("‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏", reply_markup=build_roles_menu_kb())


@router.callback_query(F.data == "roles:menu")
@inject
async def cb_roles_menu(
    cq: types.CallbackQuery,
    user_service: FromDishka[UserServiceInterface],
):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–æ–ª–µ–π."""
    caller = await user_service.get_or_create(CreateUserEntity.from_aiogram(cq.from_user))
    if not is_superuser(caller):
        await cq.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    try:
        await cq.message.edit_text("‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏", reply_markup=build_roles_menu_kb())
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await cq.answer()


@router.callback_query(F.data.startswith("roles:view:"))
@inject
async def cb_roles_view(
    cq: types.CallbackQuery,
    user_service: FromDishka[UserServiceInterface],
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏."""
    caller = await user_service.get_or_create(CreateUserEntity.from_aiogram(cq.from_user))
    if not is_superuser(caller):
        await cq.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    # –§–æ—Ä–º–∞—Ç: roles:view:{role_choice}:page:{n}
    try:
        _, _, role_choice, _, page_s = cq.data.split(":", 4)
        page = int(page_s)
    except Exception: # pylint: disable=broad-except
        role_choice = "users"
        page = 0

    if role_choice == "all":
        text, markup = await _build_all_list_page(user_service, page)
    else:
        text, markup = await _build_role_list_page(user_service, role_choice, page)
    try:
        await cq.message.edit_text(text, reply_markup=markup)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await cq.answer()


@router.callback_query(F.data.startswith("roles:set:"))
@inject
async def cb_roles_set(
    cq: types.CallbackQuery,
    user_service: FromDishka[UserServiceInterface],
):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    caller = await user_service.get_or_create(CreateUserEntity.from_aiogram(cq.from_user))
    if not is_superuser(caller):
        await cq.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    # –§–æ—Ä–º–∞—Ç: roles:set:{tg_id}:{role}:{role_choice}:{page}
    try:
        _, _, tg_id_s, role_s, role_choice, page_s = cq.data.split(":", 5)
        target_id = int(tg_id_s)
        new_role = UserType(role_s)
        page = int(page_s)
    except Exception: # pylint: disable=broad-except
        await cq.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", show_alert=True)
        return

    # –ë–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–µ–Ω—è—Ç—å —Ä–æ–ª—å SUPERUSER
    tu = await user_service.get_user_by_id(target_id)
    if tu and getattr(tu, "user_type", None) == UserType.SUPERUSER:
        await cq.answer("–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª—å SUPERUSER", show_alert=True)
        return

    await user_service.set_user_type(target_id, new_role)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
    if role_choice == "all":
        text, markup = await _build_all_list_page(user_service, page)
    else:
        text, markup = await _build_role_list_page(user_service, role_choice, page)
    try:
        await cq.message.edit_text(text, reply_markup=markup)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await cq.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
