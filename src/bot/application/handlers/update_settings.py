# from datetime import time
#
# from aiogram import Router
# from aiogram.filters import Command
# from aiogram.fsm.context import FSMContext
# from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
# from aiogram.utils.keyboard import InlineKeyboardBuilder
#
# from dao.holder import HolderDao
# from entities.states import JiraUpdateStates
# from entities.user import UserEntity
# from entities.validator import InputValidation
# from handlers.errors import TelegramLogger
# from handlers.projects_picker import project_picker
# from handlers.status_picker import status_picker
# from handlers.time_picker import time_picker
# from project_logger import logger
# from services.jira import JiraTaskManager
#
# router = Router()
#
#
# @router.message(Command("update"))
# async def update_settings(message: Message):
#     keyboard = InlineKeyboardBuilder()
#     keyboard.row(
#         InlineKeyboardButton(text="üîë –¢–æ–∫–µ–Ω", callback_data="update_token"),
#         InlineKeyboardButton(text="üìß Email", callback_data="update_email"),
#     )
#     keyboard.row(
#         InlineKeyboardButton(text="üìÖ –î–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞", callback_data="update_days_until"),
#         InlineKeyboardButton(text="üïí –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á", callback_data="update_task_time"),
#     )
#     keyboard.row(
#         InlineKeyboardButton(text="üìÅ –ü—Ä–æ–µ–∫—Ç—ã", callback_data="update_excluded_projects"),
#         InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å—ã", callback_data="update_excluded_statuses"),
#     )
#
#     await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard.as_markup())
#
#
# @router.callback_query(lambda c: c.data.startswith("update_"))
# async def process_update_callback(callback: CallbackQuery, state: FSMContext, dao: HolderDao):
#     if callback.data == "update_token":
#         await callback.message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω:")
#         await state.set_state(JiraUpdateStates.waiting_for_token)
#
#     elif callback.data == "update_email":
#         await callback.message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
#         await state.set_state(JiraUpdateStates.waiting_for_email)
#
#     elif callback.data == "update_days_until":
#         current_days = await dao.user.get_days_until_deadline(callback.from_user.id)
#         await callback.message.answer(f"üìÖ –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –∑–∞–¥–∞—á–∞—Ö? (–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_days} –¥–Ω.)")
#         await state.set_state(JiraUpdateStates.waiting_for_days_until)
#
#     elif callback.data == "update_task_time":
#         current_time = await dao.user.get_task_send_time(callback.from_user.id)
#         time_keyboard = time_picker.create_time_keyboard(current_time or time(10, 0))
#         await callback.message.answer("üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á:", reply_markup=time_keyboard)
#         await state.set_state(JiraUpdateStates.waiting_for_task_time)
#         await state.update_data(current_time=current_time or time(10, 0))
#
#     elif callback.data == "update_excluded_projects":
#         user: UserEntity = await InputValidation.check_user_settings(callback.message, dao, callback.from_user.id)
#         current_excluded_projects = await dao.user.get_user_excluded_projects(callback.from_user.id)
#
#         all_projects = await JiraTaskManager.get_jira_projects_by_request(user)
#         await state.update_data(
#             excluded_projects=current_excluded_projects,
#             current_page=0,
#             all_projects=all_projects,
#         )
#
#         keyboard = await project_picker.create_project_keyboard(
#             user,
#             page=0,
#             excluded_projects=current_excluded_projects,
#             projects=all_projects,
#         )
#         await callback.message.answer("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã:", reply_markup=keyboard)
#         await state.set_state(JiraUpdateStates.waiting_for_excluded_projects)
#
#     elif callback.data == "update_excluded_statuses":
#         user: UserEntity = await InputValidation.check_user_settings(callback.message, dao, callback.from_user.id)
#         current_excluded_statuses = await dao.user.get_user_excluded_statuses(callback.from_user.id)
#
#         all_statuses = await JiraTaskManager.get_jira_statuses_by_request(user)
#         await state.update_data(
#             excluded_statuses=current_excluded_statuses,
#             current_page=0,
#             all_statuses=all_statuses,
#         )
#
#         keyboard = await status_picker.create_status_keyboard(
#             user,
#             page=0,
#             excluded_statuses=current_excluded_statuses,
#             statuses=all_statuses,
#         )
#         await callback.message.answer("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á:", reply_markup=keyboard)
#         await state.set_state(JiraUpdateStates.waiting_for_excluded_statuses)
#
#     await callback.answer()
#
#
# @router.message(JiraUpdateStates.waiting_for_email)
# async def process_update_jira_email(message: Message, state: FSMContext, dao: HolderDao, telegram_logger: TelegramLogger):
#     is_valid, result = InputValidation.validate_email(message.text)
#     if not is_valid:
#         await message.reply(result)
#         return
#
#     try:
#         await dao.user.update_jira_email(tg_id=message.from_user.id, jira_email=result)
#         await message.reply("‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
#     except Exception as e:
#         await message.reply("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email.")
#         await telegram_logger.log_message(
#             f"üö®  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email\n"
#             f"üë§ Username: {message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
#             f"üë§ –û—à–∏–±–∫–∞: {e}\n\n"
#             "#set_error\n"
#             "#ERROR",
#             level="ERROR",
#             module="UserModule",
#             additional_info={
#                 "user_id": message.from_user.id,
#                 "action": "process_update_jira_email",
#             },
#         )
#         logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email.\n\n {e}")
#     finally:
#         await state.clear()
#
#
# @router.message(JiraUpdateStates.waiting_for_token)
# async def process_update_jira_token(message: Message, state: FSMContext, dao: HolderDao, telegram_logger: TelegramLogger):
#     token = message.text.strip()
#
#     if not token:
#         await message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
#         return
#
#     token_check = InputValidation.validate_jira_token(token)
#     if not token_check["valid"]:
#         error_message = InputValidation.get_error_message(token_check)
#         await message.reply(error_message)
#         return
#
#     try:
#         await dao.user.update_jira_token(tg_id=message.from_user.id, jira_token=token)
#         await message.reply("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
#     except Exception as e:
#         await message.reply("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.")
#         await telegram_logger.log_message(
#             f"üö®  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞\n"
#             f"üë§ Username: {message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
#             f"üë§ –û—à–∏–±–∫–∞: {e}\n\n"
#             "#set_error\n"
#             "#ERROR",
#             level="ERROR",
#             module="UserModule",
#             additional_info={
#                 "user_id": message.from_user.id,
#                 "action": "process_update_jira_token",
#             },
#         )
#         logger.error(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.\n {e}")
#     finally:
#         await state.clear()
#
#
# @router.message(JiraUpdateStates.waiting_for_days_until)
# async def process_days_until(message: Message, state: FSMContext, dao: HolderDao):
#     try:
#         days_until = int(message.text.strip())
#
#         if days_until <= 0:
#             await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
#             return
#
#         if days_until >= 365:
#             await message.reply("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ.")
#             return
#
#         await dao.user.update_jira_days_until(tg_id=message.from_user.id, days_until=days_until)
#
#         await message.reply(f"‚úÖ –î–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {days_until}")
#     except ValueError:
#         await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
#     finally:
#         await state.clear()
