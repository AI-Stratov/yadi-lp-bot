from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import LinkPreviewOptions
from aiogram.exceptions import TelegramBadRequest
from dishka import FromDishka
from dishka.integrations.aiogram import inject
from redis.asyncio import Redis

from bot.application.services.long_poll import YandexDiskPollingService
from bot.domain.services.scheduler import SchedulerServiceInterface
from bot.application.widgets.keyboards import build_stats_menu_kb, build_kv_list_kb
from bot.common.utils.formatters import StatisticsFormatter
from bot.common.utils.formatting import parse_dt_raw, fmt_secs, fmt_int, human_ago
from bot.common.utils.permissions import is_admin
from bot.domain.entities.user import CreateUserEntity
from bot.domain.services.statistics import StatisticsServiceInterface
from bot.domain.services.user import UserServiceInterface

router = Router(name="stats")


@router.message(Command("stats"))
@inject
async def cmd_stats(
    message: types.Message,
    user_service: FromDishka[UserServiceInterface],
    stats_service: FromDishka[StatisticsServiceInterface],
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."""
    caller = await user_service.get_or_create(CreateUserEntity.from_aiogram(message.from_user))
    if not is_admin(caller):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    snap = await stats_service.build_snapshot()
    text = StatisticsFormatter.format_summary(snap)

    await message.answer(
        text,
        parse_mode="HTML",
        link_preview_options=LinkPreviewOptions(is_disabled=True),
        reply_markup=build_stats_menu_kb(),
    )


@router.callback_query(F.data == "stats:refresh")
@inject
async def cb_stats_refresh(
    callback: types.CallbackQuery,
    user_service: FromDishka[UserServiceInterface],
    stats_service: FromDishka[StatisticsServiceInterface],
):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    await callback.answer()
    caller = await user_service.get_or_create(CreateUserEntity.from_aiogram(callback.from_user))
    if not is_admin(caller):
        return

    snap = await stats_service.build_snapshot()
    text = StatisticsFormatter.format_summary(snap)

    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=build_stats_menu_kb(),
            link_preview_options=LinkPreviewOptions(is_disabled=True),
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            pass
        else:
            raise


@router.callback_query(F.data == "stats:disabled")
@inject
async def cb_stats_disabled(
    callback: types.CallbackQuery,
    user_service: FromDishka[UserServiceInterface],
    stats_service: FromDishka[StatisticsServiceInterface],
):
    await callback.answer()
    caller = await user_service.get_or_create(CreateUserEntity.from_aiogram(callback.from_user))
    if not is_admin(caller):
        return
    snap = await stats_service.build_snapshot()
    items = list(snap.top_excluded.items()) if getattr(snap, "top_excluded", None) else []
    kb = build_kv_list_kb(items=items, page=0, back_cb="stats:refresh", page_cb_prefix="stats:disabled:page")
    await callback.message.edit_text("üö´ –û—Ç–∫–ª—é—á—ë–Ω–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (—Ç–æ–ø)", reply_markup=kb)


@router.callback_query(F.data.startswith("stats:disabled:page:"))
@inject
async def cb_stats_disabled_page(
    callback: types.CallbackQuery,
    user_service: FromDishka[UserServiceInterface],
    stats_service: FromDishka[StatisticsServiceInterface],
):
    await callback.answer()
    caller = await user_service.get_or_create(CreateUserEntity.from_aiogram(callback.from_user))
    if not is_admin(caller):
        return
    try:
        page = int(callback.data.rsplit(":", 1)[1])
    except Exception:
        page = 0
    snap = await stats_service.build_snapshot()
    items = list(snap.top_excluded.items()) if getattr(snap, "top_excluded", None) else []
    kb = build_kv_list_kb(items=items, page=page, back_cb="stats:refresh", page_cb_prefix="stats:disabled:page")
    try:
        await callback.message.edit_reply_markup(reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            pass
        else:
            raise


@router.callback_query(F.data.startswith("stats:courses:page:"))
@inject
async def cb_stats_courses(
    callback: types.CallbackQuery,
    user_service: FromDishka[UserServiceInterface],
    stats_service: FromDishka[StatisticsServiceInterface],
):
    await callback.answer()
    caller = await user_service.get_or_create(CreateUserEntity.from_aiogram(callback.from_user))
    if not is_admin(caller):
        return
    try:
        page = int(callback.data.rsplit(":", 1)[1])
    except Exception:
        page = 0
    snap = await stats_service.build_snapshot()
    items = sorted(list(snap.by_course.items()), key=lambda kv: (-(kv[1]), kv[0]))
    kb = build_kv_list_kb(items=items, page=page, back_cb="stats:refresh", page_cb_prefix="stats:courses:page")
    try:
        await callback.message.edit_text("üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∫—É—Ä—Å–∞–º", reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            pass
        else:
            raise


@router.callback_query(F.data.startswith("stats:groups:page:"))
@inject
async def cb_stats_groups(
    callback: types.CallbackQuery,
    user_service: FromDishka[UserServiceInterface],
    stats_service: FromDishka[StatisticsServiceInterface],
):
    await callback.answer()
    caller = await user_service.get_or_create(CreateUserEntity.from_aiogram(callback.from_user))
    if not is_admin(caller):
        return
    try:
        page = int(callback.data.rsplit(":", 1)[1])
    except Exception:
        page = 0
    snap = await stats_service.build_snapshot()
    items = sorted(list(snap.by_group.items()), key=lambda kv: (-(kv[1]), kv[0]))
    kb = build_kv_list_kb(items=items, page=page, back_cb="stats:refresh", page_cb_prefix="stats:groups:page")
    try:
        await callback.message.edit_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º", reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            pass
        else:
            raise


@router.callback_query(F.data == "stats:nop")
async def cb_stats_nop(callback: types.CallbackQuery):
    await callback.answer()


@router.message(Command("status"))
@inject
async def cmd_status(
    message: types.Message,
    user_service: FromDishka[UserServiceInterface],
    redis: FromDishka[Redis],
    polling: FromDishka[YandexDiskPollingService],
    scheduler: FromDishka[SchedulerServiceInterface],
    stats_service: FromDishka[StatisticsServiceInterface],
):
    caller = await user_service.get_or_create(CreateUserEntity.from_aiogram(message.from_user))
    if not is_admin(caller):
        await message.answer("üö´ –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    # –ß–µ–∫–ø–æ–∏–Ω—Ç long-poll
    try:
        checkpoint_raw = await redis.get(polling._get_checkpoint_key())  # noqa: SLF001
        checkpoint_dt = parse_dt_raw(checkpoint_raw)
        checkpoint = checkpoint_dt.strftime("%d.%m.%Y %H:%M:%S") if checkpoint_dt else "‚Äî"
        checkpoint_ago = human_ago(checkpoint_dt)
    except Exception:
        checkpoint = "‚Äî"
        checkpoint_ago = "‚Äî"

    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ long-poll
    poll_url = getattr(polling, "public_root_url", "‚Äî")
    poll_interval = fmt_secs(getattr(polling, "poll_interval", "‚Äî"))
    http_timeout = fmt_secs(getattr(polling, "http_timeout", "‚Äî"))
    poll_running = getattr(polling, "_running", False)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    sched_interval = fmt_secs(getattr(scheduler, "check_interval", "‚Äî"))
    sched_running = getattr(scheduler, "_running", False)

    # –û—á–µ—Ä–µ–¥–∏/–ø–ª–∞–Ω —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    snap = await stats_service.build_snapshot()
    queue_len = snap.queue_len
    scheduled_total = snap.scheduled_total

    lines: list[str] = ["‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞</b>", "üõ∞Ô∏è <b>Long‚Äëpoll</b>"]

    # Long-poll
    if poll_url and poll_url != "‚Äî":
        lines.append(f"  ‚Ä¢ URL: <a href=\"{poll_url}\">{poll_url}</a>")
    else:
        lines.append(f"  ‚Ä¢ URL: {poll_url}")
    lines.append(f"  ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞: {poll_interval}")
    lines.append(f"  ‚Ä¢ HTTP —Ç–∞–π–º–∞—É—Ç: {http_timeout}")
    lines.append(f"  ‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'<b>—Ä–∞–±–æ—Ç–∞–µ—Ç</b>' if poll_running else '<b>–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>'}")
    lines.append(f"  ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {checkpoint} ({checkpoint_ago})")

    # Scheduler
    lines.append("‚è∞ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>")
    lines.append(f"  ‚Ä¢ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏: {sched_interval}")
    lines.append(f"  ‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'<b>—Ä–∞–±–æ—Ç–∞–µ—Ç</b>' if sched_running else '<b>–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>'}")

    # Queues
    lines.append("üóÉÔ∏è <b>–û—á–µ—Ä–µ–¥–∏</b>")
    lines.append(f"  ‚Ä¢ –í—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞—á: <b>{fmt_int(queue_len)}</b>")
    lines.append(f"  ‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: <b>{fmt_int(scheduled_total)}</b>")

    await message.answer(
        "\n".join(lines),
        parse_mode="HTML",
        link_preview_options=LinkPreviewOptions(is_disabled=True),
    )
