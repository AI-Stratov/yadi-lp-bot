from datetime import datetime, time, timedelta
from typing import Optional

from bot.common.logs import logger
from bot.domain.entities.mappings import NotificationScheduleMode, COURSE_SUBJECTS
from bot.domain.entities.notification import NotificationTask, UserNotification
from bot.domain.entities.user import UserEntity
from bot.domain.repositories.notification import NotificationRepositoryInterface
from bot.domain.services.notification import NotificationServiceInterface
from bot.domain.services.user import UserServiceInterface


class NotificationService(NotificationServiceInterface):
    """–°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

    def __init__(
        self,
        notification_repository: NotificationRepositoryInterface,
        user_service: UserServiceInterface,
    ):
        self.repository = notification_repository
        self.user_service = user_service

    async def enqueue_many(self, tasks: list[NotificationTask]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        await self.repository.push_to_queue(tasks)
        logger.info(f"üì• –î–æ–±–∞–≤–ª–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

    async def process_queue(self) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —É—á–µ—Ç–æ–º –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        processed = 0

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await self.user_service.list_all_users()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        async for task in await self.repository.pop_from_queue():
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –µ–º—É —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            for user in users:
                if await self._should_notify_user(user, task):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    scheduled_at = self._calculate_send_time(user, task)

                    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    notification = UserNotification(
                        user_id=user.tg_id,
                        task=task,
                        created_at=datetime.now(),
                        scheduled_at=scheduled_at,
                    )

                    await self.repository.save_user_notification(notification)
                    processed += 1

        if processed > 0:
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

        return processed

    async def _should_notify_user(self, user: UserEntity, task: NotificationTask) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
        if not user.enable_notifications:
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫—É—Ä—Å
        if not user.user_course:
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ, —Ç–æ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ
        if not self._matches_user_group(user, task):
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–∞–π–ª –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º –∫—É—Ä—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self._matches_user_course(user, task):
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if user.excluded_disciplines and task.subject_code in user.excluded_disciplines:
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥—É–±–ª–∏–∫–∞—Ç
        if await self.repository.is_duplicate(user.tg_id, task):
            return False

        return True

    def _matches_user_group(self, user: UserEntity, task: NotificationTask) -> bool:
        """True, –µ—Å–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞—Ä—É—à–µ–Ω–æ.
        - –ï—Å–ª–∏ —É –∑–∞–¥–∞—á–∏ –Ω–µ—Ç —è–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã (–ª–µ–∫—Ü–∏—è –æ–±—â–∞—è) - –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –≥—Ä—É–ø–ø–µ.
        - –ï—Å–ª–∏ —É –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞, —Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.
        - –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω '–ø–æ—Ö–æ–∂–∏–π –Ω–∞ –≥—Ä—É–ø–ø—É' —Å–µ–≥–º–µ–Ω—Ç, –Ω–æ –≥—Ä—É–ø–ø–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ - —Å—á–∏—Ç–∞–µ–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
        """
        # –ï—Å–ª–∏ –≤ –ø—É—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–≥–º–µ–Ω—Ç, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –≥—Ä—É–ø–ø—É, –Ω–æ –æ–Ω –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
        if getattr(task, "group_raw", None) and not getattr(task, "study_group", None):
            return False

        # –û–±—â–∞—è –¥–ª—è –∫—É—Ä—Å–∞ –∑–∞–ø–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –õ–µ–∫—Ü–∏—è –±–µ–∑ –ø–∞–ø–∫–∏ –≥—Ä—É–ø–ø—ã)
        if not getattr(task, "study_group", None):
            return True

        # –î–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–¥–∞–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—é—â–∞—è –≥—Ä—É–ø–ø–∞
        return user.user_study_group is not None and user.user_study_group == task.study_group

    def _matches_user_course(self, user: UserEntity, task: NotificationTask) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∫ –∫—É—Ä—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç - —Å—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if not task.subject_code:
            return False

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫—É—Ä—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        course_subjects = COURSE_SUBJECTS.get(user.user_course, [])

        # –ï—Å–ª–∏ –¥–ª—è –∫—É—Ä—Å–∞ –Ω–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ - –Ω–µ —Ä–∏—Å–∫—É–µ–º –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if not course_subjects:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –∫—É—Ä—Å–∞
        return task.subject_code in course_subjects

    def _calculate_send_time(self, user: UserEntity, task: NotificationTask) -> Optional[datetime]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        now = datetime.now()

        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
        if not user.notification_mode:
            return now

        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        if user.notification_mode == NotificationScheduleMode.ASAP:
            return now

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        if user.notification_mode == NotificationScheduleMode.AT_TIME:
            if user.task_send_time:
                return self._next_scheduled_time(user.task_send_time)
            return now

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ–∫–Ω–µ –≤—Ä–µ–º–µ–Ω–∏
        if user.notification_mode == NotificationScheduleMode.IN_WINDOW:
            if user.delivery_window_start and user.delivery_window_end:
                return self._next_window_time(user.delivery_window_start, user.delivery_window_end)
            return now

        return now

    def _next_scheduled_time(self, target_time: time) -> datetime:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ AT_TIME"""
        now = datetime.now()
        scheduled = now.replace(
            hour=target_time.hour,
            minute=target_time.minute,
            second=0,
            microsecond=0
        )

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if scheduled <= now:
            scheduled = scheduled + timedelta(days=1)

        return scheduled

    def _next_window_time(self, window_start: time, window_end: time) -> datetime:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ IN_WINDOW"""
        now = datetime.now()

        # –°–æ–∑–¥–∞–µ–º datetime –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –æ–∫–Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        start_today = now.replace(
            hour=window_start.hour,
            minute=window_start.minute,
            second=0,
            microsecond=0
        )
        end_today = now.replace(
            hour=window_end.hour,
            minute=window_end.minute,
            second=0,
            microsecond=0
        )

        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≤–Ω—É—Ç—Ä–∏ –æ–∫–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        if start_today <= now <= end_today:
            return now

        # –ï—Å–ª–∏ –æ–∫–Ω–æ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ –æ–∫–Ω–∞
        if now < start_today:
            return start_today

        # –ï—Å–ª–∏ –æ–∫–Ω–æ —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ –æ–∫–Ω–∞ –∑–∞–≤—Ç—Ä–∞
        return start_today + timedelta(days=1)
