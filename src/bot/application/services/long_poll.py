import asyncio
from datetime import datetime
from hashlib import sha256
from typing import Any, Optional

import aiohttp
from bot.common.logs import logger
from bot.domain.entities.notification import NotificationTask
from bot.domain.services.long_poll import LongPollServiceInterface


class YandexDiskPollingService(LongPollServiceInterface):
    async def start(self):
        if self._running:
            return
        self._running = True
        self._task = asyncio.create_task(self._poll_loop(), name="yadisk_poll")
        logger.info("‚úÖ –û–ø—Ä–æ—Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        self._running = False
        if hasattr(self, "_task"):
            self._task.cancel()
            try:
                await self._task
            except asyncio.CancelledError:
                pass
        logger.info("üõë –û–ø—Ä–æ—Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _poll_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞."""
        while self._running:
            try:
                new_files = await self._check_for_new_files()
                if new_files:
                    logger.info(f"üì® –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {new_files}")
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞: {e}")

            await asyncio.sleep(self.poll_interval)

    async def _check_for_new_files(self) -> int:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∏—Å–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –æ—á–µ—Ä–µ–¥—å."""
        # –ß–∏—Ç–∞–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç - –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–ª–∏
        checkpoint_key = self._get_checkpoint_key()
        last_check = await self.redis.get(checkpoint_key)
        last_check_dt = self._parse_datetime(last_check)

        # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        new_tasks = []
        newest_dt = last_check_dt

        async for file_dict in self._fetch_all_files():
            file_modified = self._parse_datetime(file_dict.get("modified"))

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
            if last_check_dt and file_modified <= last_check_dt:
                continue

            # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            task = self._create_notification_task(file_dict)
            new_tasks.append(task)

            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é –¥–∞—Ç—É
            if not newest_dt or file_modified > newest_dt:
                newest_dt = file_modified

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        if new_tasks:
            await self.notification_service.enqueue_many(new_tasks)
            await self.redis.set(checkpoint_key, newest_dt.isoformat())

        return len(new_tasks)

    async def _fetch_all_files(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞ (–æ–±—Ö–æ–¥–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)."""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–µ–∫ –¥–ª—è –æ–±—Ö–æ–¥–∞ –≤ —à–∏—Ä–∏–Ω—É
        dirs_to_scan = [""]  # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω—è

        while dirs_to_scan:
            current_path = dirs_to_scan.pop(0)

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            items = await self._fetch_directory(current_path)

            for item in items:
                if item.get("type") == "file":
                    yield item
                elif item.get("type") == "dir":
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ö–æ–¥
                    dirs_to_scan.append(item.get("path"))

    async def _fetch_directory(self, path: str) -> list[dict]:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)."""
        all_items = []
        offset = 0
        limit = 200

        while True:
            params = {
                "public_key": self.public_root_url,
                "limit": limit,
                "offset": offset,
            }
            if path:
                params["path"] = path

            try:
                timeout = aiohttp.ClientTimeout(total=self.http_timeout)
                url = "https://cloud-api.yandex.net/v1/disk/public/resources"

                async with self.http.get(url, params=params, timeout=timeout) as resp:
                    resp.raise_for_status()
                    data = await resp.json()
                    items = data.get("_embedded", {}).get("items", [])

                    if not items:
                        break

                    all_items.extend(items)

                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º limit, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                    if len(items) < limit:
                        break

                    offset += limit
                    await asyncio.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É (path={path}): {e}")
                break

        return all_items

    def _create_notification_task(self, file_dict: dict) -> NotificationTask:
        """–°–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞."""
        path = file_dict.get("path", "")
        subject_code = self._extract_subject_from_path(path)

        return NotificationTask(
            subject_code=subject_code,
            subject_title=None,
            file_name=file_dict.get("name", ""),
            file_path=path,
            download_url=file_dict.get("file"),
            md5=file_dict.get("md5"),
            resource_id=file_dict.get("resource_id"),
            modified_iso=file_dict.get("modified"),
        )

    def _extract_subject_from_path(self, path: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –ø—É—Ç–∏ (–∏—â–µ—Ç –≤ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö –ø—É—Ç–∏)."""
        try:
            from bot.domain.entities.mappings import SUBJECTS

            # –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –∏ –∏—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
            segments = [s for s in path.replace("\\", "/").split("/") if s]
            for segment in reversed(segments):
                if segment in SUBJECTS:
                    return segment
        except Exception:
            pass

        return None

    def _parse_datetime(self, value: Any) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏—Ç datetime –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ bytes."""
        if not value:
            return None

        if isinstance(value, (bytes, bytearray)):
            value = value.decode()

        try:
            return datetime.fromisoformat(value.replace("Z", "+00:00"))
        except Exception:
            return None

    def _get_checkpoint_key(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–ø–æ–∏–Ω—Ç–∞."""
        url_hash = sha256(self.public_root_url.encode()).hexdigest()[:12]
        return f"yadi-lp:checkpoint:{url_hash}"
