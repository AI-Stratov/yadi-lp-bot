import asyncio
from datetime import datetime

from aiogram.types import LinkPreviewOptions

from bot.common.logs import logger
from bot.common.utils.formatting import format_notification_message
from bot.domain.entities.notification import UserNotification
from bot.domain.services.scheduler import SchedulerServiceInterface


class NotificationScheduler(SchedulerServiceInterface):
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    """

    @property
    def check_interval(self) -> int:
        """–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)."""
        return self._check_interval

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self._running:
            return

        self._running = True
        self._task = asyncio.create_task(self._scheduler_loop(), name="notification_scheduler")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self._running = False
        if self._task:
            self._task.cancel()
            try:
                await self._task
            except asyncio.CancelledError:
                pass
        logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self._running:
            try:
                await self._send_due_notifications()
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

            await asyncio.sleep(self.check_interval)

    async def _send_due_notifications(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        now = datetime.now()
        sent_count = 0
        failed_count = 0

        logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ {now.isoformat()}")

        async for notification in self.repository.get_due_notifications(now): # NOQA
            try:
                await self._send_notification(notification)
                if notification.notification_id:
                    await self.repository.mark_as_sent(notification.notification_id)
                sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {notification.user_id}: {e}")
                if notification.notification_id:
                    await self.repository.mark_as_failed(notification.notification_id, str(e))
                failed_count += 1

        if sent_count > 0 or failed_count > 0:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {sent_count}, –æ—à–∏–±–æ–∫: {failed_count}")
        else:
            logger.debug("‚è≠Ô∏è –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

    async def _send_notification(self, notification: UserNotification):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        task = notification.task
        message = format_notification_message(task)

        await self.bot.send_message(
            chat_id=notification.user_id,
            text=message,
            parse_mode="HTML",
            link_preview_options=LinkPreviewOptions(is_disabled=True),
        )
