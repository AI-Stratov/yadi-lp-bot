import asyncio
from datetime import datetime

from aiogram import Bot
from aiogram.types import LinkPreviewOptions

from bot.common.logs import logger
from bot.domain.entities.notification import UserNotification
from bot.domain.repositories.notification import NotificationRepositoryInterface


class NotificationScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""

    def __init__(
        self,
        bot: Bot,
        repository: NotificationRepositoryInterface,
        check_interval: int = 60,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    ):
        self.bot = bot
        self.repository = repository
        self.check_interval = check_interval
        self._running = False
        self._task = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self._running:
            return

        self._running = True
        self._task = asyncio.create_task(self._scheduler_loop(), name="notification_scheduler")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self._running = False
        if self._task:
            self._task.cancel()
            try:
                await self._task
            except asyncio.CancelledError:
                pass
        logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self._running:
            try:
                await self._send_due_notifications()
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

            await asyncio.sleep(self.check_interval)

    async def _send_due_notifications(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        now = datetime.now()
        sent_count = 0
        failed_count = 0

        logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ {now.isoformat()}")

        async for notification in self.repository.get_due_notifications(now):
            try:
                await self._send_notification(notification)
                if notification.notification_id:
                    await self.repository.mark_as_sent(notification.notification_id)
                sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {notification.user_id}: {e}")
                if notification.notification_id:
                    await self.repository.mark_as_failed(notification.notification_id, str(e))
                failed_count += 1

        if sent_count > 0 or failed_count > 0:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {sent_count}, –æ—à–∏–±–æ–∫: {failed_count}")
        else:
            logger.debug(f"‚è≠Ô∏è –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

    async def _send_notification(self, notification: UserNotification):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        task = notification.task
        message = self._format_message(task)

        await self.bot.send_message(
            chat_id=notification.user_id,
            text=message,
            parse_mode="HTML",
            link_preview_options=LinkPreviewOptions(is_disabled=True),
        )

    def _format_message(self, task) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        from bot.domain.entities.mappings import SUBJECTS

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞
        subject_display = SUBJECTS.get(task.subject_code, task.subject_code) if task.subject_code else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        # –î–∞—Ç–∞/–≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è
        lesson_date_str = ""
        if task.lesson_date:
            lesson_date_str = task.lesson_date.strftime('%d.%m %H:%M')

        # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        teacher = task.teacher or ""

        # –•—ç—à—Ç–µ–≥–∏
        def sanitize_tag(value: str) -> str:
            # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ #—Ö—ç—à—Ç–µ–≥: –ø—Ä–æ–±–µ–ª—ã/—Ç–æ—á–∫–∏ –≤ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è, —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ
            import re
            tag = re.sub(r"[\s\.]+", "_", value.strip())
            tag = re.sub(r"[^0-9A-Za-z–ê-–Ø–∞-—è–Å—ë_]+", "", tag)
            tag = re.sub(r"_+", "_", tag).strip("_")
            return tag

        hashtags: list[str] = []
        # –¢–µ–º–∞ (–ª–µ–∫—Ü–∏—è/—Å–µ–º–∏–Ω–∞—Ä)
        if getattr(task, "topic", None):
            hashtags.append(f"#{sanitize_tag(task.topic.lower())}")
        # –ì—Ä—É–ø–ø–∞
        if getattr(task, "study_group", None):
            hashtags.append(f"#{sanitize_tag(task.study_group.value)}")
        # –ü—Ä–µ–¥–º–µ—Ç (–∫–æ–¥ - –∫–æ—Ä–æ—á–µ –∏ —É–¥–æ–±–Ω–µ–µ)
        if getattr(task, "subject_code", None):
            hashtags.append(f"#{sanitize_tag(task.subject_code)}")
        # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å (–∫–∞–∫ –¥–æ–ø. —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞)
        if teacher:
            hashtags.append(f"#{sanitize_tag(teacher)}")

        # –í—ã–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É: download_url –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ, –∏–Ω–∞—á–µ public_url
        link = task.download_url or task.public_url or ""

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        lines: list[str] = []
        lines.append(f"üìö <b>{subject_display or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</b>")
        if lesson_date_str:
            lines.append(f"üìÖ {lesson_date_str}")
        if teacher:
            lines.append(f"üë®‚Äçüè´ {teacher}")
        if hashtags:
            for h in hashtags:
                # –†–∞–∑–Ω–æ—Å–∏–º —Ç–µ–≥–∞–º–∏ –ø–æ —Å–º—ã—Å–ª—É, –Ω–æ –∫–æ–º–ø–∞–∫—Ç–Ω–æ - –æ–¥–∏–Ω —Ç–µ–≥ –≤ —Å—Ç—Ä–æ–∫–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —ç–º–æ–¥–∑–∏
                if h.startswith('#–ª–µ–∫—Ü–∏—è') or h.startswith('#—Å–µ–º–∏–Ω–∞—Ä'):
                    lines.append(f"üíº {h}")
                elif getattr(task, "study_group", None) and h.endswith(task.study_group.value):
                    lines.append(f"üë• {h}")
                elif getattr(task, "subject_code", None) and h.endswith(task.subject_code):
                    lines.append(f"üìñ {h}")
                else:
                    lines.append(f"üè∑Ô∏è {h}")
        if link:
            lines.append(f"\nüîó <a href='{link}'>–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ</a>")
        else:
            lines.append(f"\nüìÑ –§–∞–π–ª: {task.file_name}")

        return "\n".join(lines)
