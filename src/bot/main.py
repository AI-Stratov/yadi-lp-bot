import asyncio

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.redis import RedisStorage
from dishka.integrations.aiogram import setup_dishka
from redis.asyncio import Redis

from bot.application.handlers.base import setup_handlers, set_bot_commands
from bot.application.services.long_poll import YandexDiskPollingService
from bot.common.logs import logger
from bot.core.di import create_container
from bot.domain.services.notification import NotificationServiceInterface
from bot.domain.services.scheduler import SchedulerServiceInterface
from bot.domain.services.user import UserServiceInterface


async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –°–æ–∑–¥–∞–µ–º DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container = await create_container()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        bot = await container.get(Bot)
        redis = await container.get(Redis)

        storage = RedisStorage(redis=redis)
        dp = Dispatcher(storage=storage)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º dishka –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ handlers
        setup_dishka(container, dp)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setup_handlers(dp)
        logger.info("‚úÖ Handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (—Ä–∞–∑–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        user_service = await container.get(UserServiceInterface)
        await set_bot_commands(bot, user_service)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

        # –ó–∞–ø—É—Å–∫–∞–µ–º long-poll —Å–µ—Ä–≤–∏—Å
        polling_service = await container.get(YandexDiskPollingService)
        await polling_service.start()
        logger.info("‚úÖ Long-polling —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
        scheduler = await container.get(SchedulerServiceInterface)
        await scheduler.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_service = await container.get(NotificationServiceInterface)
        queue_processor_task = asyncio.create_task(
            _process_notification_queue_loop(notification_service),
            name="notification_queue_processor"
        )
        logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

        try:
            await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            queue_processor_task.cancel()
            try:
                await queue_processor_task
            except asyncio.CancelledError:
                pass

            await scheduler.stop()
            await polling_service.stop()
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        await container.close()
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def _process_notification_queue_loop(notification_service: NotificationServiceInterface):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    while True:
        try:
            processed = await notification_service.process_queue()
            if processed == 0:
                # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∂–¥—ë–º –¥–æ–ª—å—à–µ
                await asyncio.sleep(30)
            else:
                # –ï—Å–ª–∏ –±—ã–ª–∏ –∑–∞–¥–∞—á–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—â–µ
                await asyncio.sleep(5)
        except asyncio.CancelledError:
            logger.info("üõë –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            raise
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await asyncio.sleep(10)


def run():
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞...")


if __name__ == "__main__":
    run()
